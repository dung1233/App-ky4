import 'package:camera/camera.dart';
import 'package:flutter/material.dart';
import 'package:google_mlkit_pose_detection/google_mlkit_pose_detection.dart';

import 'detector_view.dart';
import 'painters/pose_painter.dart';
import 'pose_classifier_processor.dart';
// c√≥ th·ªÉ nh·∫≠n di·ªán c·∫£ ch·ªëng ƒë·∫©y l·∫ßn squats v√† ph√¢n bi·ªát ƒë∆∞·ª£c ƒë·∫øm ƒë∆∞·ª£c
//Nh∆∞ng camera tr∆∞·ªõc ƒëang b·ªã l·ªói kh√¥ng ƒë·∫øm ƒë∆∞·ª£c v√† nh·∫≠n di·ªán ko ƒë∆∞·ª£c ch·ªëng ƒë·∫©y
//C√≤n squats th√¨ c·∫£ 2 camera ƒë·ªÅu ho√†n th√†nh nhi·ªám v·ª•
class PoseDetectorView extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _PoseDetectorViewState();
}

class _PoseDetectorViewState extends State<PoseDetectorView> {
  final PoseDetector _poseDetector = PoseDetector(options: PoseDetectorOptions());
  final PoseClassifierProcessor _poseClassifierProcessor = PoseClassifierProcessor(isStreamMode: true);

  bool _canProcess = true;
  bool _isBusy = false;
  CustomPaint? _customPaint;
  String _exerciseText = "Ch∆∞a nh·∫≠n di·ªán";
  int _repCount = 0;
  Pose? _previousPose;
  var _cameraLensDirection = CameraLensDirection.back;

  @override
  void dispose() {
    _canProcess = false;
    _poseDetector.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        DetectorView(
          title: 'Pose Detector',
          customPaint: _customPaint,
          text: _exerciseText,
          onImage: _processImage,
          initialCameraLensDirection: _cameraLensDirection,
          onCameraLensDirectionChanged: (value) => _cameraLensDirection = value,
        ),

        // Hi·ªÉn th·ªã s·ªë l·∫ßn th·ª±c hi·ªán b√†i t·∫≠p
        Positioned(
          top: 20,
          left: 20,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text("B√†i t·∫≠p: $_exerciseText", style: TextStyle(fontSize: 18, color: Colors.white)),
              Text("S·ªë l·∫ßn: $_repCount", style: TextStyle(fontSize: 18, color: Colors.white)),
            ],
          ),
        ),
      ],
    );
  }

  Future<void> _processImage(InputImage inputImage) async {
    if (!_canProcess || _isBusy) return;
    _isBusy = true;

    final poses = await _poseDetector.processImage(inputImage);

    if (poses.isNotEmpty && _isValidPose(poses.first)) {
      List<String> classificationResult = _poseClassifierProcessor.getPoseResult(poses.first);

      if (classificationResult.isNotEmpty && _isSignificantMovement(poses.first)) {
        setState(() {
          _exerciseText = classificationResult[0];

          if (classificationResult.length > 1) {
            List<String> parts = classificationResult[1].split(" ");
            if (parts.length > 2) {
              int newRepCount = int.tryParse(parts[2]) ?? _repCount;
              if (newRepCount > _repCount) {
                _repCount = newRepCount;
                print("[DEBUG] B√†i t·∫≠p: $_exerciseText - S·ªë l·∫ßn: $_repCount");
              }
            }
          }
        });
      }

      _previousPose = poses.first;
    }

    if (poses.isNotEmpty && inputImage.metadata?.size != null && inputImage.metadata?.rotation != null) {
      _customPaint = CustomPaint(
        painter: PosePainter(
          poses,
          inputImage.metadata!.size,
          inputImage.metadata!.rotation,
          _cameraLensDirection,
        ),
      );
    } else {
      _customPaint = null;
    }

    _isBusy = false;
    if (mounted) {
      setState(() {});
    }
  }

  /// üîπ Ki·ªÉm tra t∆∞ th·∫ø h·ª£p l·ªá ƒë·ªÉ tr√°nh l·ªói ƒë·∫øm b√†n tay
  bool _isValidPose(Pose pose) {
    final requiredKeypoints = [
      PoseLandmarkType.leftShoulder,
      PoseLandmarkType.rightShoulder,
      PoseLandmarkType.leftHip,
      PoseLandmarkType.rightHip,
      PoseLandmarkType.leftKnee,
      PoseLandmarkType.rightKnee,
      PoseLandmarkType.leftAnkle,
      PoseLandmarkType.rightAnkle,
      PoseLandmarkType.nose, // Th√™m ƒëi·ªÅu ki·ªán nh·∫≠n di·ªán to√†n b·ªô c∆° th·ªÉ
    ];

    int validKeypoints = 0;
    for (var keypoint in requiredKeypoints) {
      if (pose.landmarks.containsKey(keypoint)) {
        validKeypoints++;
      }
    }

    return validKeypoints >= 8; // Y√™u c·∫ßu √≠t nh·∫•t 8 ƒëi·ªÉm ƒë·ªÉ h·ª£p l·ªá
  }

  /// üîπ Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ th·ª±c s·ª± di chuy·ªÉn hay kh√¥ng
  bool _isSignificantMovement(Pose currentPose) {
    if (_previousPose == null) return true;

    final keypointsToCheckSquats = [
      PoseLandmarkType.leftHip,
      PoseLandmarkType.rightHip,
      PoseLandmarkType.leftKnee,
      PoseLandmarkType.rightKnee
    ];

    final keypointsToCheckPushUps = [
      PoseLandmarkType.leftShoulder,
      PoseLandmarkType.rightShoulder,
      PoseLandmarkType.leftElbow,
      PoseLandmarkType.rightElbow
    ];

    double totalMovementY = 0;
    double totalMovementZ = 0;

    // üîπ Ki·ªÉm tra chuy·ªÉn ƒë·ªông theo Y (Squats)
    for (var keypoint in keypointsToCheckSquats) {
      if (currentPose.landmarks.containsKey(keypoint) && _previousPose!.landmarks.containsKey(keypoint)) {
        final newPos = currentPose.landmarks[keypoint]!;
        final oldPos = _previousPose!.landmarks[keypoint]!;
        double movement = (newPos.y - oldPos.y).abs();
        totalMovementY += movement;
      }
    }

    // üîπ Ki·ªÉm tra chuy·ªÉn ƒë·ªông theo Z v√† Y (Push-ups)
    for (var keypoint in keypointsToCheckPushUps) {
      if (currentPose.landmarks.containsKey(keypoint) && _previousPose!.landmarks.containsKey(keypoint)) {
        final newPos = currentPose.landmarks[keypoint]!;
        final oldPos = _previousPose!.landmarks[keypoint]!;
        double movementZ = (newPos.z - oldPos.z).abs();
        double movementY = (newPos.y - oldPos.y).abs();
        totalMovementZ += movementZ + movementY; // K·∫øt h·ª£p c·∫£ hai
      }
    }

    return totalMovementY > 30 || totalMovementZ > 20; // Gi·∫£m ng∆∞·ª°ng ƒë·ªÉ nh·∫≠n di·ªán nhanh h∆°n
  }
}
