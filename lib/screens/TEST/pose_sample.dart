import 'package:flutter/services.dart';
import '../TEST/point3d.dart';
import '../TEST/pose_embedding.dart';

class PoseSample {
  static const int numLandmarks = 33;
  static const int numDims = 3;

  final String name;
  final String className;
  final List<Point3D> landmarks;
  final List<Point3D> embedding;

  PoseSample({
    required this.name,
    required this.className,
    required this.landmarks,
  }) : embedding = PoseEmbedding.getPoseEmbedding(landmarks);

  /// üîπ ƒê·ªçc file CSV v√† tr·∫£ v·ªÅ danh s√°ch PoseSample
  static Future<List<PoseSample>> loadPoseSamples(String csvPath) async {
    List<PoseSample> poseSamples = [];

    try {
      String csvContent = await rootBundle.loadString(csvPath);
      List<String> lines = csvContent.split('\n');

      for (String line in lines) {
        PoseSample? poseSample = PoseSample.fromCsv(line);
        if (poseSample != null) {
          poseSamples.add(poseSample);
        }
      }
    } catch (e) {
      print("L·ªói khi ƒë·ªçc file CSV: $e");
    }

    return poseSamples;
  }

  /// üîπ Chuy·ªÉn m·ªôt d√≤ng CSV th√†nh PoseSample
  static PoseSample? fromCsv(String csvLine) {
    if (csvLine.trim().isEmpty) return null;
    List<String> tokens = csvLine.split(',');

    // üî• Ki·ªÉm tra s·ªë c·ªôt c√≥ ƒë√∫ng hay kh√¥ng
    if (tokens.length < (numLandmarks * numDims) + 2) {
      print("‚ö†Ô∏è L·ªói: D·ªØ li·ªáu CSV kh√¥ng h·ª£p l·ªá (S·ªë c·ªôt kh√¥ng ƒë√∫ng): $csvLine");
      return null;
    }

    String name = tokens[0];
    String className = tokens[1];
    List<Point3D> landmarks = [];

    // üî• Ki·ªÉm tra index tr∆∞·ªõc khi th√™m v√†o danh s√°ch
    for (int i = 2; i < tokens.length; i += numDims) {
      if (i + 2 >= tokens.length) {
        print("‚ö†Ô∏è L·ªói: Index ngo√†i ph·∫°m vi trong d√≤ng CSV");
        continue; // B·ªè qua d√≤ng l·ªói thay v√¨ g√¢y crash
      }

      try {
        double x = double.parse(tokens[i]);
        double y = double.parse(tokens[i + 1]);
        double z = double.parse(tokens[i + 2]);
        landmarks.add(Point3D(x, y, z));
      } catch (e) {
        print("‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô: $e");
        return null;
      }
    }

    return PoseSample(name: name, className: className, landmarks: landmarks);
  }
}
